// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using REACTBIGBANG.Models;

#nullable disable

namespace REACTBIGBANG.Migrations
{
    [DbContext(typeof(HospitalContext))]
    [Migration("20230703070243_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("REACTBIGBANG.Models.Admin", b =>
                {
                    b.Property<int>("Admin_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Admin_id"));

                    b.Property<string>("Admin_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Admin_password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Admin_id");

                    b.ToTable("admins");
                });

            modelBuilder.Entity("REACTBIGBANG.Models.Doctor", b =>
                {
                    b.Property<int>("Doctor_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Doctor_id"));

                    b.Property<string>("Doctor_Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Doctor_experience")
                        .HasColumnType("int");

                    b.Property<string>("Doctor_gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Doctor_image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Doctor_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Doctor_id");

                    b.ToTable("doctors");
                });

            modelBuilder.Entity("REACTBIGBANG.Models.Patient", b =>
                {
                    b.Property<int>("Patient_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Patient_id"));

                    b.Property<int>("Doctor_id")
                        .HasColumnType("int");

                    b.Property<string>("Medical_treatment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patient_Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patient_Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Patient_age")
                        .HasColumnType("int");

                    b.Property<string>("Patient_gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patient_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Phonenumber")
                        .HasColumnType("bigint");

                    b.HasKey("Patient_id");

                    b.HasIndex("Doctor_id");

                    b.ToTable("patients");
                });

            modelBuilder.Entity("REACTBIGBANG.Models.Patient", b =>
                {
                    b.HasOne("REACTBIGBANG.Models.Doctor", "Doctors")
                        .WithMany("patients")
                        .HasForeignKey("Doctor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("REACTBIGBANG.Models.Doctor", b =>
                {
                    b.Navigation("patients");
                });
#pragma warning restore 612, 618
        }
    }
}
